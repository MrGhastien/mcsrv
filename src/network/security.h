/**
 * @file
 *
 * @brief Functions related to encryption, ciphers and Mojang auth. 
 */

#ifndef ENCRYPTION_H
#define ENCRYPTION_H

#include "definitions.h"
#include "memory/arena.h"
#include "json/json.h"

#include <openssl/encoder.h>
#include <openssl/evp.h>
#include <openssl/rsa.h>

typedef struct Connection Connection;

typedef struct {
    EVP_PKEY* key_pair;
    EVP_PKEY_CTX* key_ctx;
    u8* encoded_key;
    u64 encoded_key_size;
} EncryptionContext;

typedef struct {
    EVP_CIPHER_CTX* cipher_ctx;
    EVP_CIPHER_CTX* decipher_ctx;
    u8* shared_secret;
} PeerEncryptionContext;

/**
 * Initializes an encryption context.
 *
 * This function generates a new RSA key pair using OpenSSL, and encodes
 * it in DER format.
 *
 * @param[out] ctx The context structure to initialize.
 * @return @ref TRUE if the encryption context was initialized successfully, or @ref FALSE if
 * errors occurred.
 */
bool encryption_init(EncryptionContext* ctx);
/**
 * Frees resources associated with an encryption context.
 *
 * OpenSSL handles and resources are freed by calling this function.
 *
 * @param[in,out] ctx The encryption context to deinitialize.
 */
void encryption_cleanup(EncryptionContext* ctx);

/**
 * Decrypts input data and writes in the output buffer.
 *
 * This function is used only once per connection, as it decrypts the shared secret
 * and verify token received in the ENC_RES packet. It decrypts data using the RSA key
 * generated by OpenSSL when the context was initialized.
 *
 * @param ctx The encryption context, containing the RSA key pair.
 * @param arena The arena used to allocate the output buffer.
 * @param[out] out_size A pointer to a @ref u64. The size of the output buffer is written in that memory.
 * @param[in] in The input buffer.
 * @param in_size The size of the input buffer.
 * @return The output buffer, or NULL if decryption failed.
 *
 * @note The value at @p out_size should not be used when the decryption has failed, as it is undefined whether the value is reset or not.
 */
u8* encryption_decrypt(EncryptionContext* ctx, Arena* arena, u64* out_size, u8* in, u64 in_size);

/**
 * Initializes a peer-specific encryption context.
 *
 * This function initializes two AES ciphers, one for encryption and one for decryption.
 * The AES ciphers are continuously updated, and are closed only when cleaning up the peer-specific * encryption context.
 *
 * @param ctx The encryption context to initialize. Must be non-null.
 * @param arena The arena used to allocate the shared secret buffer.
 * @param[in] shared_secret A buffer containing the shared secret to use as the ciphers' key.
 * @return @ref TRUE if initialization is successful, @ref FALSE otherwise.
 */
bool encryption_init_peer(PeerEncryptionContext* ctx, Arena* arena, u8* shared_secret);
/**
 * Deinitializes a peer-specific encryption context.
 *
 * This function frees resources associated with the AES ciphers of the context structure.
 *
 * @param[in] ctx The context to free resources from.
 */
void encryption_cleanup_peer(PeerEncryptionContext* ctx);

/**
 * Encrypts data using the peer-specific AES cipher.
 * 
 * @param ctx The peer-specific encryption context containing the AES cipher to use.
 * @param[in] in The buffer containing the data do encrypt.
 * @param in_size The size of the input buffer.
 */
bool encryption_cipher(PeerEncryptionContext* ctx, ByteBuffer* buffer, u64 offset);
bool encryption_decipher(PeerEncryptionContext* ctx, ByteBuffer* buffer, u64 offset);

bool encryption_authenticate_player(Connection* conn, JSON* json);

#endif /* ! ENCRYPTION_H */
